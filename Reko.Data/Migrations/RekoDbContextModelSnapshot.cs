// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reko.Data;

namespace Reko.Data.Migrations
{
    [DbContext(typeof(RekoDbContext))]
    partial class RekoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CastMemberMovie", b =>
                {
                    b.Property<int>("CastMembersId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CastMembersId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesCastMembers");
                });

            modelBuilder.Entity("CastMemberTvShow", b =>
                {
                    b.Property<int>("CastMembersId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("CastMembersId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsCastMembers");
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.Property<string>("CountriesId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CountriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesCountries");
                });

            modelBuilder.Entity("CrewMemberEpisode", b =>
                {
                    b.Property<int>("CrewMembersId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodesId")
                        .HasColumnType("int");

                    b.HasKey("CrewMembersId", "EpisodesId");

                    b.HasIndex("EpisodesId");

                    b.ToTable("EpisodesCrewMembers");
                });

            modelBuilder.Entity("CrewMemberMovie", b =>
                {
                    b.Property<int>("CrewMembersId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CrewMembersId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesCrewMembers");
                });

            modelBuilder.Entity("CrewMemberTvShow", b =>
                {
                    b.Property<int>("CrewMembersId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("CrewMembersId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsCrewMembers");
                });

            modelBuilder.Entity("EpisodeGuestStar", b =>
                {
                    b.Property<int>("EpisodesId")
                        .HasColumnType("int");

                    b.Property<int>("GuestStarsId")
                        .HasColumnType("int");

                    b.HasKey("EpisodesId", "GuestStarsId");

                    b.HasIndex("GuestStarsId");

                    b.ToTable("EpisodesGuestStars");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesGenres");
                });

            modelBuilder.Entity("GenreTvShow", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsGenres");
                });

            modelBuilder.Entity("KeyWordMovie", b =>
                {
                    b.Property<int>("KeyWordsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesKeywords");
                });

            modelBuilder.Entity("KeyWordTvShow", b =>
                {
                    b.Property<int>("KeyWordsId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsKeywords");
                });

            modelBuilder.Entity("LanguageMovie", b =>
                {
                    b.Property<string>("LanguagesId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("LanguagesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesLanguages");
                });

            modelBuilder.Entity("MovieProductionCompany", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompaniesId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "ProductionCompaniesId");

                    b.HasIndex("ProductionCompaniesId");

                    b.ToTable("MoviesProductionCompanies");
                });

            modelBuilder.Entity("NetworkTvShow", b =>
                {
                    b.Property<int>("NetworksId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("NetworksId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsNetworks");
                });

            modelBuilder.Entity("ProductionCompanyTvShow", b =>
                {
                    b.Property<int>("ProductionCompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("ProductionCompaniesId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsProductionCompanies");
                });

            modelBuilder.Entity("Reko.Data.Entities.CastMember", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Adult")
                        .HasColumnType("bit");

                    b.Property<int?>("CastId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("CreditId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("KnownForDepartment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(1400)
                        .HasColumnType("nvarchar(1400)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1400)
                        .HasColumnType("nvarchar(1400)");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("CastMembers");
                });

            modelBuilder.Entity("Reko.Data.Entities.CollectionInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("HeName")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("CollectionInfos");
                });

            modelBuilder.Entity("Reko.Data.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Reko.Data.Entities.CrewMember", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Adult")
                        .HasColumnType("bit");

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("CreditId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("KnownForDepartment")
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("Reko.Data.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("HeName")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("HeOverview")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("Overview")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ProductionCode")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("StillPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<double>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Reko.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("HeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Reko.Data.Entities.GuestStar", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Adult")
                        .HasColumnType("bit");

                    b.Property<string>("Character")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("CreditId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("KnownForDepartment")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("GuestStars");
                });

            modelBuilder.Entity("Reko.Data.Entities.KeyWord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("Reko.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Reko.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<int?>("CollectionInfoId")
                        .HasColumnType("int");

                    b.Property<string>("HeOverview")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeTitle")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("Homepage")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAdultThemed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("Overview")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tagline")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Title")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionInfoId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Reko.Data.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.HasKey("Id");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Reko.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AlsoKnownAs")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deathday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAdultFilmStar")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Reko.Data.Entities.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headquarters")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Homepage")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("ParentCompanyLogoPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ParentCompanyName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("Reko.Data.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeName")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("HeOverview")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("Overview")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TvShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvShowId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Reko.Data.Entities.TvShow", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("EpisodeRunTime")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HeOverview")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Homepage")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("InProduction")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("NumberOfEpisodes")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfSeasons")
                        .HasColumnType("int");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("Reko.Data.Entities.TvShowCreator", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreditId")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ProfilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("TvShowCreators");
                });

            modelBuilder.Entity("Reko.Data.Entities.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<string>("Iso31661")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iso6391")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Key")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Site")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("TvShowId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TvShowId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("TvShowTvShowCreator", b =>
                {
                    b.Property<int>("TvShowCreatorsId")
                        .HasColumnType("int");

                    b.Property<int>("TvShowsId")
                        .HasColumnType("int");

                    b.HasKey("TvShowCreatorsId", "TvShowsId");

                    b.HasIndex("TvShowsId");

                    b.ToTable("TvShowsTvShowCreators");
                });

            modelBuilder.Entity("CastMemberMovie", b =>
                {
                    b.HasOne("Reko.Data.Entities.CastMember", null)
                        .WithMany()
                        .HasForeignKey("CastMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CastMemberTvShow", b =>
                {
                    b.HasOne("Reko.Data.Entities.CastMember", null)
                        .WithMany()
                        .HasForeignKey("CastMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.HasOne("Reko.Data.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrewMemberEpisode", b =>
                {
                    b.HasOne("Reko.Data.Entities.CrewMember", null)
                        .WithMany()
                        .HasForeignKey("CrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrewMemberMovie", b =>
                {
                    b.HasOne("Reko.Data.Entities.CrewMember", null)
                        .WithMany()
                        .HasForeignKey("CrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrewMemberTvShow", b =>
                {
                    b.HasOne("Reko.Data.Entities.CrewMember", null)
                        .WithMany()
                        .HasForeignKey("CrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EpisodeGuestStar", b =>
                {
                    b.HasOne("Reko.Data.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.GuestStar", null)
                        .WithMany()
                        .HasForeignKey("GuestStarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Reko.Data.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreTvShow", b =>
                {
                    b.HasOne("Reko.Data.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeyWordMovie", b =>
                {
                    b.HasOne("Reko.Data.Entities.KeyWord", null)
                        .WithMany()
                        .HasForeignKey("KeyWordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeyWordTvShow", b =>
                {
                    b.HasOne("Reko.Data.Entities.KeyWord", null)
                        .WithMany()
                        .HasForeignKey("KeyWordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageMovie", b =>
                {
                    b.HasOne("Reko.Data.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieProductionCompany", b =>
                {
                    b.HasOne("Reko.Data.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.ProductionCompany", null)
                        .WithMany()
                        .HasForeignKey("ProductionCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkTvShow", b =>
                {
                    b.HasOne("Reko.Data.Entities.Network", null)
                        .WithMany()
                        .HasForeignKey("NetworksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductionCompanyTvShow", b =>
                {
                    b.HasOne("Reko.Data.Entities.ProductionCompany", null)
                        .WithMany()
                        .HasForeignKey("ProductionCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reko.Data.Entities.Episode", b =>
                {
                    b.HasOne("Reko.Data.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Reko.Data.Entities.Movie", b =>
                {
                    b.HasOne("Reko.Data.Entities.CollectionInfo", "CollectionInfo")
                        .WithMany("Movies")
                        .HasForeignKey("CollectionInfoId");

                    b.Navigation("CollectionInfo");
                });

            modelBuilder.Entity("Reko.Data.Entities.Season", b =>
                {
                    b.HasOne("Reko.Data.Entities.TvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("Reko.Data.Entities.Video", b =>
                {
                    b.HasOne("Reko.Data.Entities.Movie", "Movie")
                        .WithMany("Videos")
                        .HasForeignKey("MovieId");

                    b.HasOne("Reko.Data.Entities.TvShow", "TvShow")
                        .WithMany("Videos")
                        .HasForeignKey("TvShowId");

                    b.Navigation("Movie");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("TvShowTvShowCreator", b =>
                {
                    b.HasOne("Reko.Data.Entities.TvShowCreator", null)
                        .WithMany()
                        .HasForeignKey("TvShowCreatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reko.Data.Entities.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reko.Data.Entities.CollectionInfo", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Reko.Data.Entities.Movie", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Reko.Data.Entities.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("Reko.Data.Entities.TvShow", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
